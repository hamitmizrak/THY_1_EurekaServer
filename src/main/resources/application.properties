# Dağıtık sistemlerde Eureka Server görevi microservilerin kayıt edilmesi ve birbirini tanımlamak için kullanıyoruz.

# Spring boot uygulama adını gösteriri
spring.application.name=_1_EurekaServer

# Eureka server kullanıcı arayüzü portu
server.port=8761

# Eğer uygulamamız Eureka Server ise bu değeri false yapmamız gerekecektir.
# ÇÜNKÜ:
# Eureka Server kendini tekrar başka bir servera kayıt etmemesi için false yapıyoruz.
# Default: true
eureka.client.register-with-eureka=false

# Eureka Client'ların Eureka Server'dan servis kayıtlarının(Registry) alıp almayacağını bu ayarlar belirleriz
# Eğer false yaparsak; Kendisinin diğer sunucudan veri gelmesine gerek yoktur diyoruz.
# Default: true
eureka.client.fetch-registry=false

# Eureka server hata durumlarında kendisini korumaya alacaktır.
# Eğer false yaparsak: Eureka Server gelen ve giden istekleri sınırlarayarak Veri kaybını önleyecektir.
# Default: true
eureka.server.enable-self-preservation=false

####################################################################################################
####################################################################################################
# http://localhost:8761/actuator/health
eureka.client.healthcheck.enabled=true

# Health endpoint'ini acmak
management.endpoints.web.exposure.include= health

# Mikroservisler, belirli aralıklarla Eureka Servera bir heartbeat sinyali gönderir ve
# bu sinyal sayesinde ilgili servisin çalıştığından emin olur
# saniye cinsinden
eureka.instance.lease-renewal-interval-in-seconds= 30

# Lease Expiration (Sür Sonu): bir mikroservis belirli bir süre boyunca heartbeart göndermezse UP yerine DOWN
eureka.instance.lease-expiration-duration-in-seconds= 90

# Eureka Server cluster (küme) yapılandırması
# Eğer birden fazla Eureka Server'ınız varsa, her bir sunucunun diğerleriyle iletişim kurabilmesi için
# serviceUrl.defaultZone ayarını kullanabilirsiniz. Bu, Eureka Server'ların birbirleriyle
# veri paylaşmasını sağlar. Yüksek erişilebilirlik sağlamak amacıyla kullanılan küme yapısında
# Eureka Server'ların birbirlerini tanıması için birbirlerine kaydolmaları gerekir.
# Diğer Eureka Server'ların URL'lerini buraya ekleyin.
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/


# Eureka Client kimlik doğrulama
# Eğer Eureka Server güvenli bir yapıdaysa ve istemcilerin doğrulanması gerekiyorsa,
# bu ayarlarla kimlik doğrulama ekleyebilirsiniz.
# Temel kimlik doğrulama için kullanıcı adı ve parola tanımlanabilir.
# eureka.client.serviceUrl.defaultZone=http://username:password@localhost:8761/eureka/

# Eureka Server'dan kaydı yenileme sıklığı
# registry-fetch-interval-seconds, Eureka Client’ın servis kaydını güncelleme sıklığını
# ayarlamanızı sağlar. Örneğin, her 60 saniyede bir servis kaydının güncellenmesini istiyorsanız,
# bu değeri 60 sanie olarak ayarlayabilirsiniz.
eureka.client.registry-fetch-interval-seconds=60

# Eureka Client'ın Eureka Server'dan yanıt alamazsa kaç kez yeniden deneyeceği
# Eğer Eureka Client bir Eureka Server'a bağlanamazsa, yeniden bağlanma girişimlerinin
# sayısını belirleyebilirsiniz. retry-limit, Client’ın yeniden bağlantı deneme sayısını
# belirler. Böylece Eureka Server geçici olarak kapalı olduğunda yeniden bağlantı
# denemeleri sınırlandırılabilir.
eureka.client.retry-limit=5


# Eureka Sunucusu'ndaki kayıt yenileme aralığı
# eureka.server.eviction-interval-timer-in-ms, Eureka Server'ın kayıtları
# güncelleyip temizleme süresini milisaniye cinsinden belirler. Varsayılan olarak 60 saniyedir.
# Bu, Eureka Server’ın DOWN olarak işaretlenen mikroservisleri belirli aralıklarla
# kayıt listesinden çıkarmasını sağlar.
# milisaniye cinsinden: 60s=60000ms
eureka.server.eviction-interval-timer-in-ms=60000


# Prefer IP Address: Eğer IP adresini hostname yerine kullanmak istiyorsanız,
# bu ayarı true yapabilirsiniz. Bu ayar, mikroservislerin IP adreslerini kullanarak
# birbirlerini tanımasını sağlar. IP adresine dayalı olarak mikroservisler arasında
# daha hızlı ve doğru bir bağlantı kurulabilir.
# eureka.instance.prefer-ip-address=true

# Instance ID: Her bir mikroservisin kendine özgü bir kimliği olması için
# instanceId özelliğini kullanabilirsiniz. Bu özellik, özellikle aynı uygulamanın
# birden fazla örneği çalıştığında ayırt edici bir kimlik sağlar. Böylece her bir mikroservis
# diğerlerinden ayırt edilir.
# eureka.instance.instanceId=${spring.application.name}:${spring.cloud.client.hostname}
####################################################################################################
####################################################################################################